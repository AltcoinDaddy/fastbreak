version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fastbreak}
      POSTGRES_USER: ${POSTGRES_USER:-fastbreak}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fastbreak}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fastbreak-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fastbreak-network

  # API Gateway
  api-gateway:
    image: ghcr.io/fastbreak/api-gateway:latest
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fastbreak}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-fastbreak}
      - REDIS_URL=redis://redis:6379
      - FLOW_RPC_URL=${FLOW_RPC_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fastbreak-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.fastbreak.app`)"
      - "traefik.http.routers.api-gateway.tls=true"
      - "traefik.http.routers.api-gateway.tls.certresolver=letsencrypt"

  # AI Scouting Service
  ai-scouting:
    image: ghcr.io/fastbreak/ai-scouting:latest
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fastbreak}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-fastbreak}
      - REDIS_URL=redis://redis:6379
      - NBA_STATS_API_KEY=${NBA_STATS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fastbreak-network

  # Marketplace Monitor
  marketplace-monitor:
    image: ghcr.io/fastbreak/marketplace-monitor:latest
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fastbreak}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-fastbreak}
      - REDIS_URL=redis://redis:6379
      - TOP_SHOT_API_KEY=${TOP_SHOT_API_KEY}
      - FLOWTY_API_KEY=${FLOWTY_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fastbreak-network

  # Trading Service
  trading-service:
    image: ghcr.io/fastbreak/trading-service:latest
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fastbreak}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-fastbreak}
      - REDIS_URL=redis://redis:6379
      - FLOW_RPC_URL=${FLOW_RPC_URL}
      - FLOW_PRIVATE_KEY=${FLOW_PRIVATE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fastbreak-network

  # Frontend
  frontend:
    image: ghcr.io/fastbreak/frontend:latest
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.fastbreak.app
      - NEXT_PUBLIC_FLOW_NETWORK=${FLOW_NETWORK:-mainnet}
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - fastbreak-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`fastbreak.app`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  # Reverse Proxy
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    restart: unless-stopped
    networks:
      - fastbreak-network

volumes:
  postgres_data:
  redis_data:
  letsencrypt_data:

networks:
  fastbreak-network:
    driver: bridge